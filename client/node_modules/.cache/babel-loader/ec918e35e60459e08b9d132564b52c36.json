{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\TokenSale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\TokenSale\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\TokenSale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\TokenSale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\TokenSale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\TokenSale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\TokenSale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\TokenSale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\TokenSale\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport MethaToken from \"./contracts/MethaToken.json\";\nimport MethaCrowdsale from \"./contracts/MethaCrowdsale.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, accounts, networkId, deployedNetworkToken, MethaTokenInstance, deployedNetworkCrowdsale, MethaCrowdsaleInstance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getWeb3();\n\n            case 3:\n              web3 = _context.sent;\n              _context.next = 6;\n              return web3.eth.getAccounts();\n\n            case 6:\n              accounts = _context.sent;\n              _context.next = 9;\n              return web3.eth.net.getId();\n\n            case 9:\n              networkId = _context.sent;\n              deployedNetworkToken = MethaToken.networks[networkId];\n              MethaTokenInstance = new web3.eth.Contract(MethaToken.abi, deployedNetworkToken && deployedNetworkToken.address);\n              deployedNetworkCrowdsale = MethaCrowdsale.networks[networkId];\n              MethaCrowdsaleInstance = new web3.eth.Contract(MethaCrowdsale.abi, deployedNetworkCrowdsale && deployedNetworkCrowdsale.address);\n\n              _this.setState({\n                web3: web3,\n                accounts: accounts,\n                MethaTokenInstance: MethaTokenInstance,\n                MethaCrowdsaleInstance: MethaCrowdsaleInstance\n              }, _this.Init);\n\n              _context.next = 21;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](0);\n              // Catch any errors for any of the above operations.\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.error(_context.t0);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 17]]);\n    }));\n    _this.Init =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$state, web3, accounts, MethaTokenInstance, MethaCrowdsaleInstance, current_period, contributor_data_per_period, wei_contribution, token_balance, wei_raised_per_period, start_time_of_next_period, wei_raised, wallets_authorized_count;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$state = _this.state, web3 = _this$state.web3, accounts = _this$state.accounts, MethaTokenInstance = _this$state.MethaTokenInstance, MethaCrowdsaleInstance = _this$state.MethaCrowdsaleInstance;\n              _context2.next = 3;\n              return MethaCrowdsaleInstance.methods.current_period().call();\n\n            case 3:\n              current_period = _context2.sent;\n              _context2.next = 6;\n              return MethaCrowdsaleInstance.methods.get_contributor_data_per_period(current_period, accounts[0]).call();\n\n            case 6:\n              contributor_data_per_period = _context2.sent;\n              wei_contribution = contributor_data_per_period[2];\n              _context2.next = 10;\n              return MethaTokenInstance.methods.balanceOf(accounts[0]).call();\n\n            case 10:\n              token_balance = _context2.sent;\n              _context2.next = 13;\n              return MethaCrowdsaleInstance.methods.wei_raised_per_period(current_period).call();\n\n            case 13:\n              wei_raised_per_period = _context2.sent;\n              _context2.next = 16;\n              return MethaCrowdsaleInstance.methods.start_time_of_next_period().call();\n\n            case 16:\n              start_time_of_next_period = _context2.sent;\n              _context2.next = 19;\n              return MethaCrowdsaleInstance.methods.wei_raised().call();\n\n            case 19:\n              wei_raised = _context2.sent;\n              _context2.next = 22;\n              return MethaCrowdsaleInstance.methods.get_wallets_authorized_count().call();\n\n            case 22:\n              wallets_authorized_count = _context2.sent;\n\n              /*await MethaTokenInstance.methods.addMinter(MethaCrowdsaleInstance._address).send({from: accounts[0]});\n              const res = await MethaTokenInstance.methods.isMinter(MethaCrowdsaleInstance._address).call();\n              console.log(res);*/\n              _this.setState({\n                current_period: current_period,\n                token_balance: web3.utils.fromWei(token_balance, 'ether'),\n                wei_contribution: web3.utils.fromWei(wei_contribution.toString(), 'ether'),\n                wei_raised_per_period: web3.utils.fromWei(wei_raised_per_period.toString(), 'ether'),\n                start_time_of_next_period: start_time_of_next_period,\n                eth_to_send: '0.01',\n                wei_raised: web3.utils.fromWei(wei_raised.toString(), 'ether'),\n                amount_to_claim: '0.01',\n                address_to_add: '',\n                eth_to_claim: '0.01',\n                address_percent: 1,\n                address_total: '0.01',\n                wallets_authorized_count: wallets_authorized_count\n              }, _this.get_all_periods);\n\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    _this.get_all_periods =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var _this$state2, accounts, MethaCrowdsaleInstance, current_period, periods, i, res, data;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this$state2 = _this.state, accounts = _this$state2.accounts, MethaCrowdsaleInstance = _this$state2.MethaCrowdsaleInstance, current_period = _this$state2.current_period;\n              periods = [];\n              i = 0;\n\n            case 3:\n              if (!(i <= current_period)) {\n                _context3.next = 15;\n                break;\n              }\n\n              _context3.next = 6;\n              return MethaCrowdsaleInstance.methods.if_address_has_contributed_in(i, accounts[0]).call();\n\n            case 6:\n              res = _context3.sent;\n\n              if (!res) {\n                _context3.next = 12;\n                break;\n              }\n\n              _context3.next = 10;\n              return MethaCrowdsaleInstance.methods.get_contributor_data_per_period(i, accounts[0]).call();\n\n            case 10:\n              data = _context3.sent;\n\n              if (!data[3]) {\n                periods.push(i);\n              }\n\n            case 12:\n              i++;\n              _context3.next = 3;\n              break;\n\n            case 15:\n              _this.setState({\n                periods: periods.join(', ')\n              }, _this.get_wallets_authorized_datails);\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n    _this.get_wallets_authorized_datails =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var _this$state3, MethaCrowdsaleInstance, wallets_authorized_count, wallets_authorized, j, i, address, status, percent, total, total_claimed;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this$state3 = _this.state, MethaCrowdsaleInstance = _this$state3.MethaCrowdsaleInstance, wallets_authorized_count = _this$state3.wallets_authorized_count;\n              wallets_authorized = [];\n              j = 0;\n              i = 0;\n\n            case 4:\n              if (!(i <= wallets_authorized_count)) {\n                _context4.next = 26;\n                break;\n              }\n\n              _context4.next = 7;\n              return MethaCrowdsaleInstance.methods.wallets_authorized_addresses(i).call();\n\n            case 7:\n              address = _context4.sent;\n              _context4.next = 10;\n              return MethaCrowdsaleInstance.methods.wallets_authorized_to_claim(address).call();\n\n            case 10:\n              status = _context4.sent;\n              _context4.next = 13;\n              return MethaCrowdsaleInstance.methods.wallets_authorized_percent(address).call();\n\n            case 13:\n              percent = _context4.sent;\n              _context4.next = 16;\n              return MethaCrowdsaleInstance.methods.wallets_authorized_total(address).call();\n\n            case 16:\n              total = _context4.sent;\n              _context4.next = 19;\n              return MethaCrowdsaleInstance.methods.wallets_authorized_total_claimed(address).call();\n\n            case 19:\n              total_claimed = _context4.sent;\n\n              if (status) {\n                wallets_authorized.push([address, percent, total, total_claimed, i]);\n              }\n\n              j = i + 1;\n\n              if (j == wallets_authorized_count) {\n                _this.setState({\n                  wallets_authorized: wallets_authorized\n                });\n              }\n\n            case 23:\n              i++;\n              _context4.next = 4;\n              break;\n\n            case 26:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    _this.onChange = function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    };\n\n    _this.buy =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var _this$state4, web3, accounts, MethaCrowdsaleInstance, eth_to_send;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this$state4 = _this.state, web3 = _this$state4.web3, accounts = _this$state4.accounts, MethaCrowdsaleInstance = _this$state4.MethaCrowdsaleInstance, eth_to_send = _this$state4.eth_to_send;\n\n              if (!(eth_to_send >= 0.01)) {\n                _context5.next = 5;\n                break;\n              }\n\n              _context5.next = 4;\n              return MethaCrowdsaleInstance.methods.buy().send({\n                from: accounts[0],\n                value: web3.utils.toWei(eth_to_send, 'ether')\n              });\n\n            case 4:\n              _this.Init();\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n    _this.claim_period =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      var _this$state5, accounts, MethaCrowdsaleInstance, period_id;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this$state5 = _this.state, accounts = _this$state5.accounts, MethaCrowdsaleInstance = _this$state5.MethaCrowdsaleInstance, period_id = _this$state5.period_id;\n              _context6.next = 3;\n              return MethaCrowdsaleInstance.methods.claim_period(period_id).send({\n                from: accounts[0]\n              });\n\n            case 3:\n              _this.Init();\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n    _this.claim_all =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7() {\n      var _this$state6, accounts, MethaCrowdsaleInstance;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _this$state6 = _this.state, accounts = _this$state6.accounts, MethaCrowdsaleInstance = _this$state6.MethaCrowdsaleInstance;\n              _context7.next = 3;\n              return MethaCrowdsaleInstance.methods.claim_all().send({\n                from: accounts[0]\n              });\n\n            case 3:\n              _this.Init();\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n    _this.claim_range =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8() {\n      var _this$state7, accounts, MethaCrowdsaleInstance, claim_range_from, claim_range_to;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _this$state7 = _this.state, accounts = _this$state7.accounts, MethaCrowdsaleInstance = _this$state7.MethaCrowdsaleInstance, claim_range_from = _this$state7.claim_range_from, claim_range_to = _this$state7.claim_range_to;\n              _context8.next = 3;\n              return MethaCrowdsaleInstance.methods.claim_range(claim_range_from, claim_range_to).send({\n                from: accounts[0]\n              });\n\n            case 3:\n              _this.Init();\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n    _this.claim_authorized_address =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee9() {\n      var _this$state8, web3, accounts, MethaCrowdsaleInstance, amount_to_claim;\n\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _this$state8 = _this.state, web3 = _this$state8.web3, accounts = _this$state8.accounts, MethaCrowdsaleInstance = _this$state8.MethaCrowdsaleInstance, amount_to_claim = _this$state8.amount_to_claim;\n              _context9.next = 3;\n              return MethaCrowdsaleInstance.methods.claim_authorized_address(web3.utils.toWei(amount_to_claim, 'ether')).send({\n                from: accounts[0]\n              });\n\n            case 3:\n              _this.Init();\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n    _this.claim_eth_authorized_address =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee10() {\n      var _this$state9, web3, accounts, MethaCrowdsaleInstance, eth_to_claim;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _this$state9 = _this.state, web3 = _this$state9.web3, accounts = _this$state9.accounts, MethaCrowdsaleInstance = _this$state9.MethaCrowdsaleInstance, eth_to_claim = _this$state9.eth_to_claim;\n              _context10.next = 3;\n              return MethaCrowdsaleInstance.methods.claim_eth_authorized_address(web3.utils.toWei(eth_to_claim, 'ether')).send({\n                from: accounts[0]\n              });\n\n            case 3:\n              _this.Init();\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n    _this.add_authorized_address =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee11() {\n      var _this$state10, web3, accounts, MethaCrowdsaleInstance, address_to_add, address_percent, address_total;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _this$state10 = _this.state, web3 = _this$state10.web3, accounts = _this$state10.accounts, MethaCrowdsaleInstance = _this$state10.MethaCrowdsaleInstance, address_to_add = _this$state10.address_to_add, address_percent = _this$state10.address_percent, address_total = _this$state10.address_total;\n              _context11.next = 3;\n              return MethaCrowdsaleInstance.methods.add_authorized_address(address_to_add, address_percent, web3.utils.toWei(address_total, 'ether')).send({\n                from: accounts[0]\n              });\n\n            case 3:\n              _this.Init();\n\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    _this.delete_authorized_address =\n    /*#__PURE__*/\n    function () {\n      var _ref12 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12(e) {\n        var _this$state11, accounts, MethaCrowdsaleInstance;\n\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _this$state11 = _this.state, accounts = _this$state11.accounts, MethaCrowdsaleInstance = _this$state11.MethaCrowdsaleInstance;\n                _context12.next = 3;\n                return MethaCrowdsaleInstance.methods.delete_authorized_address(e.target.dataset[\"address\"], e.target.dataset[\"index\"]).send({\n                  from: accounts[0]\n                });\n\n              case 3:\n                _this.Init();\n\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x) {\n        return _ref12.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      web3: null,\n      accounts: null,\n      MethaTokenInstance: null,\n      MethaCrowdsaleInstance: null,\n      current_period: 0,\n      token_balance: 0,\n      wei_contribution: 0,\n      wei_raised_per_period: 0,\n      start_time_of_next_period: null,\n      eth_to_send: 0,\n      period_id: 0,\n      claim_range_from: 0,\n      claim_range_to: 0,\n      wei_raised: 0,\n      periods: [],\n      amount_to_claim: '0',\n      address_to_add: '',\n      eth_to_claim: '0.01',\n      address_percent: 1,\n      address_total: '0.01',\n      wallets_authorized_count: 0,\n      wallets_authorized: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.web3) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }, \"Loading Web3, accounts, and contracts...\");\n      }\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, \"ETH contribution : \", this.state.wei_contribution, \" | METHA balance : \", this.state.token_balance, \" | Current period ID : \", this.state.current_period, \" | Current ETH raised : \", this.state.wei_raised_per_period, \" | Total ETH raised : \", this.state.wei_raised, \" | Next Period : \", new Date(this.state.start_time_of_next_period * 1000).toLocaleString()), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"Periods : \", this.state.periods), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \"Buy\"), React.createElement(\"input\", {\n        className: \"u-full-width\",\n        type: \"text\",\n        name: \"eth_to_send\",\n        placeholder: \"0.01 ETH\",\n        value: this.state.eth_to_send,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"u-full-width button-primary\",\n        onClick: this.buy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"buy\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, \"Claim per period\"), React.createElement(\"input\", {\n        className: \"u-full-width\",\n        type: \"text\",\n        name: \"period_id\",\n        value: this.state.period_id,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"u-full-width button-primary\",\n        onClick: this.claim_period,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, \"claim\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, \"Claim All\"), React.createElement(\"button\", {\n        className: \"u-full-width button-primary\",\n        onClick: this.claim_all,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, \"claim all\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, \"Claim Range\"), \"From:\", React.createElement(\"input\", {\n        className: \"u-full-width\",\n        type: \"text\",\n        name: \"claim_range_from\",\n        value: this.state.claim_range_from,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }), \"To:\", React.createElement(\"input\", {\n        className: \"u-full-width\",\n        type: \"text\",\n        name: \"claim_range_to\",\n        value: this.state.claim_range_to,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"u-full-width button-primary\",\n        onClick: this.claim_range,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"claim all\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, \"Claim for Admin\"), React.createElement(\"input\", {\n        className: \"u-full-width\",\n        type: \"text\",\n        name: \"amount_to_claim\",\n        value: this.state.amount_to_claim,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"u-full-width button-primary\",\n        onClick: this.claim_authorized_address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, \"claim\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, \"Claim ETH for Admins\"), React.createElement(\"input\", {\n        className: \"u-full-width\",\n        type: \"text\",\n        name: \"eth_to_claim\",\n        value: this.state.eth_to_claim,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"u-full-width button-primary\",\n        onClick: this.claim_eth_authorized_address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, \"claim\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, \"Add authorized address\"), \"Address:\", React.createElement(\"input\", {\n        className: \"u-full-width\",\n        type: \"text\",\n        name: \"address_to_add\",\n        value: this.state.address_to_add,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }), \"Percent:\", React.createElement(\"input\", {\n        className: \"u-full-width\",\n        type: \"text\",\n        name: \"address_percent\",\n        value: this.state.address_percent,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }), \"Total:\", React.createElement(\"input\", {\n        className: \"u-full-width\",\n        type: \"text\",\n        name: \"address_total\",\n        value: this.state.address_total,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"u-full-width button-primary\",\n        onClick: this.add_authorized_address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, \"add\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, \"Authorized Addresses\"), React.createElement(\"table\", {\n        className: \"u-full-width\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, \"Percent\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, \"Total\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, \"Tatal Claimed\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, \"Actions\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, this.state.wallets_authorized.map(function (item) {\n        return React.createElement(\"tr\", {\n          key: item[0],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 334\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 335\n          },\n          __self: this\n        }, item[0]), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 336\n          },\n          __self: this\n        }, item[1], \"%\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 337\n          },\n          __self: this\n        }, _this2.state.web3.utils.fromWei(item[2], 'ether'), \" ETH\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338\n          },\n          __self: this\n        }, _this2.state.web3.utils.fromWei(item[3], 'ether'), \" ETH\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          \"data-index\": item[4],\n          \"data-address\": item[0],\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: _this2.delete_authorized_address,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339\n          },\n          __self: this\n        }, \"delete\")));\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Administrador\\Desktop\\TokenSale\\client\\src\\App.js"],"names":["React","Component","MethaToken","MethaCrowdsale","getWeb3","App","props","componentDidMount","web3","eth","getAccounts","accounts","net","getId","networkId","deployedNetworkToken","networks","MethaTokenInstance","Contract","abi","address","deployedNetworkCrowdsale","MethaCrowdsaleInstance","setState","Init","alert","console","error","state","methods","current_period","call","get_contributor_data_per_period","contributor_data_per_period","wei_contribution","balanceOf","token_balance","wei_raised_per_period","start_time_of_next_period","wei_raised","get_wallets_authorized_count","wallets_authorized_count","utils","fromWei","toString","eth_to_send","amount_to_claim","address_to_add","eth_to_claim","address_percent","address_total","get_all_periods","periods","i","if_address_has_contributed_in","res","data","push","join","get_wallets_authorized_datails","wallets_authorized","j","wallets_authorized_addresses","wallets_authorized_to_claim","status","wallets_authorized_percent","percent","wallets_authorized_total","total","wallets_authorized_total_claimed","total_claimed","onChange","e","target","name","value","buy","send","from","toWei","claim_period","period_id","claim_all","claim_range","claim_range_from","claim_range_to","claim_authorized_address","claim_eth_authorized_address","add_authorized_address","delete_authorized_address","dataset","Date","toLocaleString","map","item","cursor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport MethaToken from \"./contracts/MethaToken.json\";\nimport MethaCrowdsale from \"./contracts/MethaCrowdsale.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      web3: null,\n      accounts: null,\n      MethaTokenInstance: null,\n      MethaCrowdsaleInstance: null,\n      current_period: 0,\n      token_balance: 0,\n      wei_contribution: 0,\n      wei_raised_per_period: 0,\n      start_time_of_next_period: null,\n      eth_to_send: 0,\n      period_id: 0,\n      claim_range_from: 0,\n      claim_range_to: 0,\n      wei_raised: 0,\n      periods: [],\n      amount_to_claim: '0',\n      address_to_add: '',\n      eth_to_claim: '0.01',\n      address_percent: 1,\n      address_total: '0.01',\n      wallets_authorized_count: 0,\n      wallets_authorized: []\n    };\n  }\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n\n      const networkId = await web3.eth.net.getId();\n      \n      const deployedNetworkToken = MethaToken.networks[networkId];\n      const MethaTokenInstance = new web3.eth.Contract(MethaToken.abi, deployedNetworkToken && deployedNetworkToken.address);\n\n      const deployedNetworkCrowdsale = MethaCrowdsale.networks[networkId];\n      const MethaCrowdsaleInstance = new web3.eth.Contract(MethaCrowdsale.abi, deployedNetworkCrowdsale && deployedNetworkCrowdsale.address);\n      \n      this.setState({\n        web3,\n        accounts,\n        MethaTokenInstance,\n        MethaCrowdsaleInstance \n      }, this.Init);\n      \n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  Init = async () => {\n    const { web3, accounts, MethaTokenInstance, MethaCrowdsaleInstance } = this.state;\n\n    const current_period = await MethaCrowdsaleInstance\n            .methods\n            .current_period()\n            .call();\n\n    const contributor_data_per_period = await MethaCrowdsaleInstance\n            .methods\n            .get_contributor_data_per_period(current_period, accounts[0])\n            .call();\n\n    const wei_contribution = contributor_data_per_period[2];\n\n    const token_balance = await MethaTokenInstance\n            .methods\n            .balanceOf(accounts[0])\n            .call()\n\n    const wei_raised_per_period = await MethaCrowdsaleInstance\n            .methods\n            .wei_raised_per_period(current_period)\n            .call();\n\n    const start_time_of_next_period = await MethaCrowdsaleInstance\n            .methods\n            .start_time_of_next_period()\n            .call();\n\n    const wei_raised = await MethaCrowdsaleInstance\n            .methods\n            .wei_raised()\n            .call()\n    const wallets_authorized_count = await MethaCrowdsaleInstance\n            .methods\n            .get_wallets_authorized_count()\n            .call() \n\n    /*await MethaTokenInstance.methods.addMinter(MethaCrowdsaleInstance._address).send({from: accounts[0]});\n    const res = await MethaTokenInstance.methods.isMinter(MethaCrowdsaleInstance._address).call();\n    console.log(res);*/\n\n    this.setState({\n      current_period,\n      token_balance: web3.utils.fromWei(token_balance, 'ether'),\n      wei_contribution: web3.utils.fromWei(wei_contribution.toString(), 'ether'),\n      wei_raised_per_period: web3.utils.fromWei(wei_raised_per_period.toString(), 'ether'),\n      start_time_of_next_period,\n      eth_to_send: '0.01',\n      wei_raised : web3.utils.fromWei(wei_raised.toString(), 'ether'),\n      amount_to_claim: '0.01',\n      address_to_add: '',\n      eth_to_claim: '0.01',\n      address_percent: 1,\n      address_total: '0.01',\n      wallets_authorized_count\n    }, this.get_all_periods);\n  };\n\n  get_all_periods = async () => {\n    const { accounts, MethaCrowdsaleInstance, current_period } = this.state;\n    var periods = [];\n    for (var i=0; i<=current_period; i++) {\n      const res = await MethaCrowdsaleInstance.methods.if_address_has_contributed_in(i, accounts[0]).call();\n      if (res) {\n        const data = await MethaCrowdsaleInstance.methods.get_contributor_data_per_period(i, accounts[0]).call();\n        if (!data[3]) {\n          periods.push(i);\n        }\n      }\n    }\n    this.setState({\n      periods: periods.join(', ') \n    }, this.get_wallets_authorized_datails);\n  }\n\n  get_wallets_authorized_datails = async () => {\n    const { MethaCrowdsaleInstance, wallets_authorized_count } = this.state;\n    var wallets_authorized = [];\n    var j = 0;\n    for (var i=0; i<=wallets_authorized_count; i++) {\n      const address = await MethaCrowdsaleInstance.methods.wallets_authorized_addresses(i).call();\n      const status = await MethaCrowdsaleInstance.methods.wallets_authorized_to_claim(address).call();\n      const percent = await MethaCrowdsaleInstance.methods.wallets_authorized_percent(address).call();\n      const total = await MethaCrowdsaleInstance.methods.wallets_authorized_total(address).call();\n      const total_claimed = await MethaCrowdsaleInstance.methods.wallets_authorized_total_claimed(address).call();\n      if (status) {\n        wallets_authorized.push([address, percent, total, total_claimed, i]);\n      }\n      j = i + 1;\n      if (j == wallets_authorized_count) {\n        this.setState({\n          wallets_authorized\n        });\n      }\n    }\n  }\n\n  onChange = (e) => {\n    this.setState({ [e.target.name] : e.target.value });\n  }\n\n  buy = async () => {\n    const { web3, accounts, MethaCrowdsaleInstance, eth_to_send } = this.state;\n    if (eth_to_send >= 0.01) {\n      await MethaCrowdsaleInstance.methods.buy().send({from: accounts[0], value: web3.utils.toWei(eth_to_send, 'ether') });\n      this.Init();\n    }\n  }\n\n  claim_period = async () => {\n    const { accounts, MethaCrowdsaleInstance, period_id } = this.state;\n    await MethaCrowdsaleInstance.methods.claim_period(period_id).send({ from: accounts[0] });\n    this.Init();\n  }\n\n  claim_all = async () => {\n    const { accounts, MethaCrowdsaleInstance } = this.state;\n    await MethaCrowdsaleInstance.methods.claim_all().send({ from: accounts[0] });\n    this.Init();\n  }\n\n  claim_range = async () => {\n    const { accounts, MethaCrowdsaleInstance, claim_range_from, claim_range_to } = this.state;\n    await MethaCrowdsaleInstance.methods.claim_range(claim_range_from, claim_range_to).send({ from: accounts[0] });\n    this.Init();\n  }\n\n  claim_authorized_address = async () => {\n    const { web3, accounts, MethaCrowdsaleInstance, amount_to_claim } = this.state;\n    await MethaCrowdsaleInstance.methods.claim_authorized_address(web3.utils.toWei(amount_to_claim, 'ether')).send({ from: accounts[0] });\n    this.Init(); \n  }\n\n  claim_eth_authorized_address = async () => {\n    const { web3, accounts, MethaCrowdsaleInstance, eth_to_claim } = this.state;\n    await MethaCrowdsaleInstance.methods.claim_eth_authorized_address(web3.utils.toWei(eth_to_claim, 'ether')).send({ from: accounts[0] });\n    this.Init(); \n  }\n\n  add_authorized_address = async () => {\n    const { web3, accounts, MethaCrowdsaleInstance, address_to_add, address_percent, address_total } = this.state;\n    await MethaCrowdsaleInstance.methods.add_authorized_address(address_to_add, address_percent, web3.utils.toWei(address_total, 'ether'))\n    .send({ from: accounts[0] });\n    this.Init(); \n  }\n\n  delete_authorized_address = async (e) => {\n    const { accounts, MethaCrowdsaleInstance } = this.state;\n    await MethaCrowdsaleInstance.methods.delete_authorized_address(e.target.dataset[\"address\"], e.target.dataset[\"index\"])\n    .send({ from: accounts[0] });\n    this.Init(); \n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contracts...</div>;\n    }\n  \n    return (\n      <div className=\"container\">\n        <br/>\n        <p>\n          ETH contribution : {this.state.wei_contribution} | \n          METHA balance : {this.state.token_balance} | \n          Current period ID : {this.state.current_period} | \n          Current ETH raised : {this.state.wei_raised_per_period} | \n          Total ETH raised : {this.state.wei_raised} |\n          Next Period : {new Date(this.state.start_time_of_next_period * 1000).toLocaleString()}\n        </p>\n        <p>\n          Periods : {this.state.periods}\n        </p>\n        <h2>Buy</h2>\n        <input \n          className=\"u-full-width\" \n          type=\"text\" \n          name=\"eth_to_send\" \n          placeholder=\"0.01 ETH\" \n          value={this.state.eth_to_send} \n          onChange={this.onChange}\n        />\n        <button className=\"u-full-width button-primary\" onClick={this.buy}>buy</button>\n        <h2>Claim per period</h2>\n        <input \n          className=\"u-full-width\" \n          type=\"text\" \n          name=\"period_id\"\n          value={this.state.period_id} \n          onChange={this.onChange}\n        />\n        <button className=\"u-full-width button-primary\" onClick={this.claim_period}>claim</button>\n        <h2>Claim All</h2>\n        <button className=\"u-full-width button-primary\" onClick={this.claim_all}>claim all</button>\n        <h2>Claim Range</h2>\n        From:\n        <input \n          className=\"u-full-width\" \n          type=\"text\" \n          name=\"claim_range_from\"\n          value={this.state.claim_range_from} \n          onChange={this.onChange}\n        />\n        To:\n        <input \n          className=\"u-full-width\" \n          type=\"text\" \n          name=\"claim_range_to\"\n          value={this.state.claim_range_to} \n          onChange={this.onChange}\n        />\n        <button className=\"u-full-width button-primary\" onClick={this.claim_range}>claim all</button>\n        <h2>Claim for Admin</h2>\n        <input \n          className=\"u-full-width\" \n          type=\"text\" \n          name=\"amount_to_claim\"\n          value={this.state.amount_to_claim} \n          onChange={this.onChange}\n        />\n        <button className=\"u-full-width button-primary\" onClick={this.claim_authorized_address}>claim</button>\n        <h2>Claim ETH for Admins</h2>\n        <input \n          className=\"u-full-width\" \n          type=\"text\" \n          name=\"eth_to_claim\"\n          value={this.state.eth_to_claim} \n          onChange={this.onChange}\n        />\n        <button className=\"u-full-width button-primary\" onClick={this.claim_eth_authorized_address}>claim</button>\n        <h2>Add authorized address</h2>\n        Address:\n        <input \n          className=\"u-full-width\" \n          type=\"text\" \n          name=\"address_to_add\"\n          value={this.state.address_to_add} \n          onChange={this.onChange}\n        />\n        Percent:\n        <input \n          className=\"u-full-width\" \n          type=\"text\" \n          name=\"address_percent\"\n          value={this.state.address_percent} \n          onChange={this.onChange}\n        />\n        Total:\n        <input \n          className=\"u-full-width\" \n          type=\"text\" \n          name=\"address_total\"\n          value={this.state.address_total} \n          onChange={this.onChange}\n        />\n        <button className=\"u-full-width button-primary\" onClick={this.add_authorized_address}>add</button>\n        <h2>Authorized Addresses</h2>\n        <table className=\"u-full-width\">\n          <thead>\n            <tr>\n              <th>Address</th>\n              <th>Percent</th>\n              <th>Total</th>\n              <th>Tatal Claimed</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.wallets_authorized.map(item => (\n            <tr key={item[0]}>\n              <td>{item[0]}</td>\n              <td>{item[1]}%</td>\n              <td>{this.state.web3.utils.fromWei(item[2], 'ether')} ETH</td>\n              <td>{this.state.web3.utils.fromWei(item[3], 'ether')} ETH</td>\n              <td><span data-index={item[4]} data-address={item[0]} style={{cursor: \"pointer\"}} onClick={this.delete_authorized_address}>delete</span></td>\n            </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}